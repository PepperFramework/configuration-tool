@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject IStringLocalizer<ApplicationResource> _localizer
@inject ILocalStorageService _localstorage;
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
    <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle"/>
        <MudSpacer/>
        <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Dark Mode"/>
        <AuthorizeView>
            <Authorized>
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Href="/login" OnClick="LogOut">Logout</MudButton>
            </Authorized>
            <NotAuthorized>
                @if (!NavManager.Uri.EndsWith("/login"))
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Href="/login">@_localizer["LoginButton"]</MudButton>
                }
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">REZEP</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private MudTheme _theme = new();
    private bool idm;
    private bool _isDarkMode
    {
        get => idm;
        set
        {
            idm = value;
            ToggleDarkMode();
        }
    }
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async void ToggleDarkMode()
    {
        await _localstorage.SetItemAsync("darkModeState", _isDarkMode);
    }

    void LogOut()
    {
        _localstorage.RemoveItemAsync("token");
        NavManager.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(await _localstorage.GetItemAsync<string>("token")))
        {
            NavManager.NavigateTo("/login");
        }
        if (string.IsNullOrEmpty(await _localstorage.GetItemAsync<string>("darkModeState")))
        {
            _isDarkMode = Convert.ToBoolean(await _localstorage.GetItemAsync<string>("darkModeState"));
        }
    }

}