@page "/register/{Token:guid}"
@using System.Text.RegularExpressions
@inject IStringLocalizer<ApplicationResource> _localizer

<PageTitle>@_localizer["Register"]</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@_localizer["Register"]: @Token</MudText>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudTextField T="string" Label=@_localizer["FirstName"] Required="true" RequiredError=@_localizer["NameRequiredErrorMessage"]/>
                <MudTextField T="string" Label=@_localizer["LastName"] Required="true" RequiredError=@_localizer["LastNameRequiredErrorMessage"]/>
                <MudTextField T="string" Label=@_localizer["Password"] HelperText=@_localizer["PasswordStrength"] @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError=@_localizer["PasswordRequired"]/>
                <MudTextField T="string"
                              Label=@_localizer["Password"] HelperText=@_localizer["RepeatPassword"] InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"/>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError=@_localizer["AgreeToTOS"] Label=@_localizer["IAgreeToTOS"]/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">@_localizer["Register"]</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public Guid Token { get; set; }

    bool success;
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return @_localizer["PasswordRequired"];
            yield break;
        }
        if (pw.Length < 8)
            yield return @_localizer["PasswordLength"];
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return @_localizer["PasswordCapitalLetter"];
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return @_localizer["PasswordLowercaseLetter"];
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return @_localizer["PasswordDigit"];
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return @_localizer["PasswordMatch"];
        return null;
    }

    private async Task CreateUser()
    {
    // TODO: create user with token
    }

}