@page "/register/{Token:guid}"
@using System.Text.RegularExpressions
@using ConfigurationTool.Model
@using ConfigurationTool.Utils
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Register</MudText>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudTextField T="string" Label="First name" Required="true" RequiredError="Your first name is required!" @ref="firstName" />
                <MudTextField T="string" Label="Last name" Required="true" RequiredError="Your last name is required!" @ref="lastName" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!"/>
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" Required="true" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"/>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree to your TOS!" Label="I agree to the TOS!"/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="@CreateUser">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Guid Token { get; set; }

    bool success;
    MudTextField<string> pwField1;
    MudTextField<string> firstName;
    MudTextField<string> lastName;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        return pwField1.Value != arg ? "Passwords don't match" : null;
    }

    private async Task CreateUser()
    {
        var user = new NewUser()
        {
            FirstName = firstName.Value,
            LastName = lastName.Value,
            Password = pwField1.Value,
            Token = Token.ToString()
        };

        var res = await HttpUtils.Post<string>("authentication/applytoken", user);
        if (res != null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        form.Reset();
    }
}