@page "/register/{Token:guid}"
@using System.Text.RegularExpressions
@using ConfigurationTool.Model
@using ConfigurationTool.Utils
@inject NavigationManager NavigationManager
@inject IStringLocalizer<ApplicationResource> Localizer

<PageTitle>Register</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["Register"]</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudTextField T="string" Label=@Localizer["FirstName"] Required="true" RequiredError=@Localizer["FirstNameRequired"] @bind-Value="firstName" />
                <MudTextField T="string" Label=@Localizer["LastName"] Required="true" RequiredError=@Localizer["LastNameRequired"] @bind-Value="lastName" />
                <MudTextField @bind-Value="password" Label=@Localizer["Password"] HelperText=@Localizer["PasswordStrength"]
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                              RequiredError=@Localizer["PasswordRequiredErrorMessage"] Required="true"
                              Variant="Variant.Text" InputType="@PasswordInput"
                              Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="EyeBtnClick"
                              AdornmentAriaLabel=@Localizer["ShowPassword"]/>
                <MudTextField T="string"
                              Label=@Localizer[""]"Password" HelperText=@Localizer["RepeatPassword"] Required="true" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"/>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError=@Localizer["AgreeToTOS"] Label=@Localizer["IAgreeToTOS"]/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="@CreateUser">@Localizer["Register"]</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Guid Token { get; set; }

    bool success;
    string password;
    string firstName;
    string lastName;
    MudForm form;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void EyeBtnClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return @Localizer["PasswordRequiredErrorMessage"];
            yield break;
        }
        if (pw.Length < 8)
            yield return @Localizer["PasswordLength"];
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return @Localizer["PasswordCapitalLetter"];
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return @Localizer["PasswordLowercaseLetter"];
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return @Localizer["PasswordDigit"];
    }

    private string? PasswordMatch(string arg)
    {
        return password != arg ? @Localizer["PasswordMatch"] : null;
    }

    private async Task CreateUser()
    {
        var user = new NewUser()
        {
            FirstName = firstName,
            LastName = lastName,
            Password = password,
            Token = Token.ToString()
        };

        var res = await HttpUtils.Post<string>("authentication/applytoken", user);
        if (res != null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        form.Reset();
    }
}