@page "/change-password/{Token:guid}"
@using ConfigurationTool.Utils
@using Blazored.LocalStorage
@using ConfigurationTool.Model
@inject IStringLocalizer<ApplicationResource> Localizer
@inject NavigationManager Navigation

<PageTitle>Change Password</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Change Password</MudText>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @bind-IsValid="@_success" @ref="_form">
                <MudTextField T="string" Label="New Password" Required="true" @bind-Value="_newPassword" RequiredError=@Localizer["PasswordRequired"]/>
                <MudTextField T="string" Label="Confirm Password" Required="true" @bind-Value="_confirmPassword" RequiredError=@Localizer["PasswordRequired"]/>
                <div class="d-flex align-center justify-space-between mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" Class="ml-auto" OnClick="@HandleChangePassword">Change Password</MudButton>
                </div>
                @if (_changeSuccessful)
                {
                    <MudText Typo="Typo.h6" GutterBottom="true" Color="Color.Success" >Password changed successfully.</MudText>
                }
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool _success;
    MudForm _form;
    string _newPassword;
    string _confirmPassword;
    bool _changeSuccessful = false;
    
    [Parameter]
    public Guid Token { get; set; }

    async Task HandleChangePassword()
    {
        if (_newPassword != _confirmPassword)
        {
            _success = false;
            StateHasChanged();
            return;
        }

        var changePassword = new ChangePasswordToken()
        {
            Token = Token,
            NewPassword = _newPassword
        };

        var response = await HttpUtils.Post<string>("change-password", changePassword);

        if (string.IsNullOrEmpty(response))
        {
            _success = false;
            StateHasChanged();
            return;
        }

        _changeSuccessful = true;
    }
}