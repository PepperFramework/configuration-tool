@page "/login"
@using ConfigurationTool.Model
@using ConfigurationTool.Utils
@using Blazored.LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService Localstorage
@inject NavigationManager Navigation
@inject IStringLocalizer<ApplicationResource> Localizer

<PageTitle>Login</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Login</MudText>
<MudGrid>
    <MudItem xs="12" sm="7" gap-y-4>
        <AuthorizeView>
            <Authorized>
                <MudPaper Class="pa-4">
                    <MudForm @bind-IsValid="@_success" @ref="_form">
                        <h2>Are you sure you want to log out?</h2>
                        <div style="margin-top: 1em">
                            <MudButton Variant="Variant.Filled" Color="Color.Info" Class="ml-auto" OnClick='() => Navigation.NavigateTo("/")'>Cancel</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@LogOut">Logout</MudButton>
                        </div>
                    </MudForm>
                </MudPaper>
            </Authorized>
            <NotAuthorized>
               <MudPaper Class="pa-4">
                   <MudForm @bind-IsValid="@_success" @ref="_form">
                       <MudTextField T="string" Label="Email" Required="true" @bind-Value="_id" RequiredError=@Localizer["EmailRequired"]/>
                       <MudTextField @bind-Value="_password" Label=@Localizer["Password"]
                                     RequiredError=@Localizer["PasswordRequired"] Required="true"
                                     Variant="Variant.Text" InputType="@_passwordInput"
                                     Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="EyeBtnClick"
                                     AdornmentAriaLabel="Show Password" />

                       <div class="d-flex align-center justify-space-between mt-4">
                           <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" Class="ml-auto" OnClick="HandleLogin">Login</MudButton>
                       </div>
                   </MudForm>
                   <MudButton Variant="Variant.Text" Color="Color.Secondary" Class="ml-auto" OnClick='() => Navigation.NavigateTo("/forgot-password")'>Forgot Password?</MudButton>
               </MudPaper>
            </NotAuthorized>
        </AuthorizeView>
    </MudItem>
</MudGrid>

@code {
    bool _success;
    MudForm _form;
    string _password;
    string _id;

    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void EyeBtnClick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    public void LogOut()
    {
        Localstorage.RemoveItemAsync("token");
        Navigation.NavigateTo("/login", true);
    }

    async Task HandleLogin()
    {
        var user = new UserLoginDto
        {
            UserIdentificator = _id,
            Password = _password
        };

        var token = await HttpUtils.Post<string>("authentication", user);

        if (string.IsNullOrEmpty(token))
        {
            _success = false;
            StateHasChanged();
            return;
        }

        await Localstorage.SetItemAsync("token", token);
        await Localstorage.SetItemAsync("email", user.UserIdentificator);
        await AuthStateProvider.GetAuthenticationStateAsync();
        Navigation.NavigateTo("/");
    }
}