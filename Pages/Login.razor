@page "/login"
@using ConfigurationTool.Model
@using System.Net
<PageTitle>Login</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Login</MudText>
<MudGrid>
    <MudItem xs="12" sm="7" gap-y-4>
        <AuthorizeView>
            <Authorized>
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">You are already, logged in!</MudAlert>
            </Authorized>
        </AuthorizeView>
        <MudPaper Class="pa-4">
            <MudForm Model="user" @ref="_form" @bind-IsValid="@_success" OnValidSubmit=@HandleLogin>
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="_pw" RequiredError="Password is required!"/>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" Class="ml-auto">Login</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    UserLoginDto user = new UserLoginDto();

    bool _success;
    MudForm _form;
    MudTextField<string> _pw;

    async Task HandleLogin()
    {
        var result = await WebRequestMethods.Http.PostAsJsonAsync("api/auth", user);
        var token = await result.Content.ReadAsStringAsync();
        Console.WriteLine(token);
        await LocalStorage.SetItemAsync("token", token);
        await AuthStateProvider.GetAuthenticationStateAsync();
    }

}