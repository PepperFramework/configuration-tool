@page "/login"
@using System.Data
@using ConfigurationTool.Model
@using ConfigurationTool.Utils
@using Blazored.LocalStorage
@using FluentValidation
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService Localstorage
@inject NavigationManager Navigation
@inject IStringLocalizer<ApplicationResource> Localizer

<PageTitle>Login</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Login</MudText>
<MudGrid>
    <MudItem xs="12" sm="7" gap-y-4>
        <AuthorizeView>
            <Authorized>
                <MudPaper Class="pa-4">
                    <MudForm @ref="_form">
                        <h2>Are you sure you want to log out?</h2>
                        <div style="margin-top: 1em">
                            <MudButton Variant="Variant.Filled" Color="Color.Info" Class="ml-auto" OnClick='() => Navigation.NavigateTo("/")'>Cancel</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@LogOut">Logout</MudButton>
                        </div>
                    </MudForm>
                </MudPaper>
            </Authorized>
            <NotAuthorized>
                <MudPaper Class="pa-4">
                    <MudForm Model="@_model" @ref="@_form">
                        <MudTextField T="string" Label="Email" For="@(() => _model.UserIdentificator)" @bind-Value="@_model.UserIdentificator" Immediate="@true"/>
                        <MudTextField @bind-Value="@_model.Password" Label=@Localizer["Password"]
                                      Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="EyeBtnClick"
                                      AdornmentAriaLabel="Show Password"/>

                        <div class="d-flex align-center justify-space-between mt-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="HandleLogin">Login</MudButton>
                        </div>
                    </MudForm>
                    <MudButton Variant="Variant.Text" Color="Color.Secondary" Class="ml-auto" OnClick='() => Navigation.NavigateTo("/forgot-password")'>Forgot Password?</MudButton>
                </MudPaper>
            </NotAuthorized>
        </AuthorizeView>
    </MudItem>
</MudGrid>

@code {
    MudForm? _form;
    private readonly UserLogin _model = new();

    class UserLogin
    {
        public string UserIdentificator { get; set; }
        public string Password { get; set; }
    }
    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void EyeBtnClick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    public void LogOut()
    {
        Localstorage.RemoveItemAsync("token");
        Navigation.NavigateTo("/login", true);
    }

    async Task HandleLogin()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }
        
        if (string.IsNullOrWhiteSpace(_model.UserIdentificator) || string.IsNullOrWhiteSpace(_model.Password))
        {
            StateHasChanged();
            return;
        }

        var user = new UserLoginDto
        {
            UserIdentificator = _model.UserIdentificator,
            Password = _model.Password
        };

        var token = await HttpUtils.Post<string>("authentication", user);

        if (string.IsNullOrEmpty(token))
        {
            StateHasChanged();
            return;
        }

        await Localstorage.SetItemAsync("token", token);
        await Localstorage.SetItemAsync("email", user.UserIdentificator);
        await AuthStateProvider.GetAuthenticationStateAsync();
        Navigation.NavigateTo("/");
    }

}