@page "/frontend-settings"
@using Blazored.LocalStorage
@using ConfigurationTool.Model
@using ConfigurationTool.Utils
@inject IStringLocalizer<ApplicationResource> Localizer
@inject ILocalStorageService Localstorage
@inject NavigationManager Navigation

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Frontend Settings</MudText>


<MudSelect Label=@Localizer["SelectLanguage"] @bind-Value="_setting.Language" Variant="Variant.Outlined" T="string">
    <MudSelectItem Value=@_de>
        <img src="https://upload.wikimedia.org/wikipedia/en/b/ba/Flag_of_Germany.svg" height="14" class="mr-1" alt="Flag of Germany"/> Deutsch
    </MudSelectItem>
    <MudSelectItem Value=@_en>
        <img src="https://upload.wikimedia.org/wikipedia/commons/a/a5/Flag_of_the_United_Kingdom_%281-2%29.svg" height="14" class="mr-1" alt="Flag of the United Kingdom"/> English
    </MudSelectItem>
</MudSelect>

<MudTextField Label="Greeting Message" @bind-Value="_setting.GreetingMessage" Variant="Variant.Outlined" />

<MudText Typo="Typo.h6">Tasking Speed</MudText>
<MudSlider @bind-Value="_setting.TalkingSpeed" Min="0.5" Max="2" Step="0.1" Color="Color.Primary" />

<MudSelect Label="Select what AI you want to use" @bind-Value="_setting.AiInUse" >
    <MudSelectItem Value="@_chatGPT">ChatGPT</MudSelectItem>
    <MudSelectItem Value="@_mistral">Mistral</MudSelectItem>
</MudSelect>

<MudGrid Style="margin-top: 10px; margin-bottom: 10px">
    @foreach (var image in Images)
    {
    <MudItem xs="4" sm="3" md="2">
        <MudCard Class="image-card" Style="@GetImageStyle(image)" @onclick="() => SelectImage(image)">
            <MudImage Src="@image"
                      Alt="Image"
                      Style="aspect-ratio: 1; object-fit: cover; width: 100%; height: auto; border-radius: 12px;" />
        </MudCard>
    </MudItem>
    }
</MudGrid>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FinishFunction">Finish</MudButton>
@code
{
    readonly string _chatGPT = "ChatGPT";
    readonly string _mistral = "Mistral";
    
    readonly string _en = "en-US";
    readonly string _de = "de";
    
    private Setting _setting = new();
    
    protected override async Task OnInitializedAsync()
    {
        var jwt = await CheckJwt();
        var settings = await HttpUtils.Get<List<Setting>>("settings", jwtToken: jwt);
        _setting = settings.FirstOrDefault();
        
        if (Images.Any())
        {
            SelectedImage = Images.First();
        }
    }
    
    private async Task FinishFunction()
    {
        var jwt = await CheckJwt();
        await HttpUtils.Put<CreateQuestion>($"settings/{_setting.Id}", _setting , jwtToken: jwt);
    }
    private async Task<string> CheckJwt()
    {
        var token = await Localstorage.GetItemAsync<string>("token");
        if (token != null) return token;

        await Localstorage.RemoveItemAsync("token");
        Navigation.NavigateTo("/login");
        return "";
    }
    
    private List<string> Images = new List<string>
    {
        "img/back1.jpg",
        "img/back2.jpg",
        "img/back3.jpg",
        "img/back4.jpg",
        "img/back5.jpg",
        "img/back6.jpg",
    };

    private string SelectedImage;

    private void SelectImage(string image)
    {
        SelectedImage = image;
        //string test = ImageToBase64(image);
        //_setting.BackgroundImage = test;
        //Console.WriteLine(test);
    }

    private string GetImageStyle(string image)
    {
        return SelectedImage == image 
            ? "border: 3px solid #1976D2; border-radius: 12px;"
            : "border-radius: 12px;";
    }
    private string ImageToBase64(string relativeImagePath)
    {
        // Get the base path of the application (the folder where the binaries are located)
        string basePath = AppContext.BaseDirectory;

        // Locate the actual path to wwwroot, ensuring it ends correctly
        string wwwrootPath = Path.Combine(basePath, "wwwroot");

        // Combine with the relative image path, but ensure the relative path doesn't start with a "/"
        string absolutePath = Path.Combine(wwwrootPath, relativeImagePath.TrimStart('/'));

        // Check if the file exists at the computed path
        if (File.Exists(absolutePath))
        {
            byte[] imageArray = File.ReadAllBytes(absolutePath);
            return Convert.ToBase64String(imageArray);
        }
        else
        {
            throw new FileNotFoundException("Image not found at the specified path.", absolutePath);
        }
    }
}