@page "/frontend-settings"
@using System.Text.RegularExpressions
@using backend.Entities
@using Blazored.LocalStorage
@using ConfigurationTool.Model
@using ConfigurationTool.Services
@using ConfigurationTool.Utils
@inject IStringLocalizer<ApplicationResource> Localizer
@inject ILocalStorageService Localstorage
@inject NavigationManager Navigation

<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Frontend Settings</MudText>


<MudSelect Label=@Localizer["SelectLanguage"] @bind-Value="_setting.Language" Variant="Variant.Outlined" T="string">
    <MudSelectItem Value=@_de>
        <img src="https://upload.wikimedia.org/wikipedia/en/b/ba/Flag_of_Germany.svg" height="14" class="mr-1" alt="Flag of Germany"/> Deutsch
    </MudSelectItem>
    <MudSelectItem Value=@_en>
        <img src="https://upload.wikimedia.org/wikipedia/commons/a/a5/Flag_of_the_United_Kingdom_%281-2%29.svg" height="14" class="mr-1" alt="Flag of the United Kingdom"/> English
    </MudSelectItem>
</MudSelect>

<MudTextField Label="Greeting Message" @bind-Value="_setting.GreetingMessage" Variant="Variant.Outlined" />

<MudText Typo="Typo.h6">Tasking Speed</MudText>
<MudSlider @bind-Value="_setting.TalkingSpeed" Min="0.5" Max="2" Step="0.1" Color="Color.Primary" />

<MudSelect Label="Select what AI you want to use" @bind-Value="_setting.AiInUse" >
    <MudSelectItem Value="@_chatGPT">ChatGPT</MudSelectItem>
    <MudSelectItem Value="@_mistral">Mistral</MudSelectItem>
</MudSelect>

<MudGrid Style="margin-top: 10px; margin-bottom: 10px">
    @foreach (var backImg in _backgroundImages)
    {
    <MudItem xs="4" sm="3" md="2">
        <MudCard Class="image-card" Style="@GetImageStyle(backImg.Id)" @onclick="() => SelectImage(backImg.Id)">
            <MudImage Src="@Base64StringBuilder(backImg.Id)"
                      Alt="Image"
                      Style="aspect-ratio: 1; object-fit: cover; width: 100%; height: auto; border-radius: 12px;" />
        </MudCard>
    </MudItem>
    }
</MudGrid>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FinishFunction">Finish</MudButton>
@code
{
    readonly string _chatGPT = "ChatGPT";
    readonly string _mistral = "Mistral";
    
    readonly string _en = "en-US";
    readonly string _de = "de";

    private List<BackgroundImage> _backgroundImages = new();
    
    private Setting _setting = new();
    
    protected override async Task OnInitializedAsync()
    {
        var jwt = await CheckJwt();
        var settings = await HttpUtils.Get<List<Setting>>("settings", jwtToken: jwt);
        _setting = settings.FirstOrDefault();
        var backgroundImages = await HttpUtils.Get<List<BackgroundImage>>("backgroundimage", jwtToken: jwt);
        
        if (backgroundImages != null)
        {
            _backgroundImages = backgroundImages;
            foreach (var backimg in backgroundImages)
            {
                if (_setting.Id == backimg.Id)
                {
                    SelectImage(backimg.Id);
                }
            }
        }
    }
    
    private async Task FinishFunction()
    {
        var jwt = await CheckJwt();
        await HttpUtils.Put<CreateQuestion>($"settings/{_setting.Id}", _setting , jwtToken: jwt);
    }

    private string Base64StringBuilder(int id)
    {
        foreach (var backimg in _backgroundImages)
        {
            if (backimg.Id == id)
            {
                return $"data:image/png;base64,{backimg.Base64Image}";
            }
        }
        
        return "";
    }
    
    private async Task<string> CheckJwt()
    {
        var token = await Localstorage.GetItemAsync<string>("token");
        if (token != null) return token;

        await Localstorage.RemoveItemAsync("token");
        Navigation.NavigateTo("/login");
        return "";
    }

    private void SelectImage(int imageId)
    {
        foreach (var backimg in _backgroundImages)
        {
            if (backimg.Id == imageId)
            {
                _setting.BackgroundImageId = imageId;
                _setting.BackgroundImage = backimg.Base64Image;
            }
        }
    }

    private string GetImageStyle(int imageid)
    {
        return imageid == _setting.BackgroundImageId
            ? "border: 3px solid #1976D2; border-radius: 12px;"
            : "border-radius: 12px;";
    }
    private string ImageToBase64(string relativeImagePath)
    {
        // Get the base path of the application (the folder where the binaries are located)
        string basePath = AppContext.BaseDirectory;
        // Locate the actual path to wwwroot, ensuring it ends correctly
        string wwwrootPath = Path.Combine(basePath, "wwwroot");

        // Combine with the relative image path, but ensure the relative path doesn't start with a "/"
        string absolutePath = Path.Combine(wwwrootPath, relativeImagePath.TrimStart('/'));
        
        // Check if the file exists at the computed path
        if (File.Exists(absolutePath))
        {
            byte[] imageArray = File.ReadAllBytes(absolutePath);
            return Convert.ToBase64String(imageArray);
        }
        else
        {
            throw new FileNotFoundException("Image not found at the specified path.", absolutePath);
        }
    }
    
    private static int ExtractNumbers(string input)
    {
        // Regular expression to match digits
        Regex regex = new Regex(@"[0-9]+");

        // Find all matches in the input string
        MatchCollection matches = regex.Matches(input);

        // Build a new string with the extracted numbers
        string result = "";
        foreach (Match match in matches)
        {
            result += match.Value;
        }

        return Convert.ToInt32(result);
    }
}