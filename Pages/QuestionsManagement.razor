@page "/manage-questions"
@using ConfigurationTool.Model
@using System.ComponentModel.DataAnnotations
@using ConfigurationTool.Utils
@attribute [Authorize]
@inject IStringLocalizer<ApplicationResource> Localizer

<PageTitle>@Localizer["QuestionsManagement"]</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["QuestionsManagement"]</MudText>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudCard>
        <MudCardContent>
            <MudTextField Label=@Localizer["Question"] @bind-Value="model.Text" For="@(() => model.Text)">
            </MudTextField>
            @foreach (var answer in model.Answers)
            {
                <MudTextField Label=@Localizer["Answer"] @bind-Value="answer.Text" For="@(() => answer.Text)"/>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Info" OnClick="() => AddAnswer()">Add answer</MudButton>
            <MudButton ButtonType="ButtonType.Reset" Color="Color.Error">Reset</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {

    private async void OnValidSubmit(EditContext context)
    {
        Console.WriteLine("Submitting question");
        var question = await HttpUtils.Post<CreateQuestion>("/question", model);
        StateHasChanged();
    }

    private CreateQuestion model = new()
    {
        Text = "",
        Answers = new List<CreateAnswer>()
        {
            new()
            {
                User = "NOT IMPLEMENTED",
            }
        }
    };

    private void AddAnswer()
    {
        model.Answers.Add(new CreateAnswer()
        {
            User = "NOT IMPLEMENTED",
        });
    }
    private class CreateQuestion
    {
        [Required]
        public string Text { get; set; }
        public List<CreateAnswer> Answers { get; set; }
    }
    
    public class CreateAnswer
    {
        [Required]
        [StringLength(10, ErrorMessage = "The answer text must be at least 10 characters long.")]
        public string? Text { get; set; }
        public string? User { get; set; }
    }
}