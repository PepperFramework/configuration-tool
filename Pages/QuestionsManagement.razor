@page "/manage-questions"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using ConfigurationTool.Utils
@using ConfigurationTool.Components
@using ConfigurationTool.Model
@attribute [Authorize]
@inject IStringLocalizer<ApplicationResource> Localizer
@inject ILocalStorageService Localstorage
@inject NavigationManager Navigation

<PageTitle>@Localizer["QuestionsManagement"]</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["QuestionsManagement"]</MudText>

<MudForm Model="@_model" @ref="@_form" Validation="@_validator.ValidateValue" ValidationDelay="0">
    <MudCard>
        <MudCardContent>
            <MudChipSet T="string" AllClosable OnClose="RemoveCategory">
                @foreach (var category in _model.Categories)
                {
                    <MudChip Text="@category.Name"></MudChip>
                }
            </MudChipSet>
            <MudTextField Label=@Localizer["Question"]   @bind-Value="@_model.Text" For="@(() => _model.Text)" Immediate="@true"/>
            @foreach (var answer in _model.Answers)
            {
                <MudTextField Label=@Localizer["Answer"]   @bind-Value="answer.Text" For="@(() => answer.Text)" Immediate="@true"/>
            }
            @if(_categories is { Count: > 0 })
            {
                <MudSelect T="string" Label="Neue Kategorie" Disabled="_model.Categories.Count == 3" @bind-Value="_selectedCategory" For="@(() => _selectedCategory)" Placeholder="Wählen Sie eine neue Kategorie aus">
                    @foreach(var category in _categories)
                    {
                        <MudSelectItem Value="@category.Name">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Info" OnClick="() => AddAnswer()">Add answer</MudButton>
            <MudButton Color="Color.Warning" OnClick="() => RemoveAnswer()">Remove answer</MudButton>
            <MudButton Color="Color.Success" OnClick="() => AddCategory()" Disabled="string.IsNullOrEmpty(_selectedCategory)">Add category</MudButton>
            <MudButton OnClick="() => OnValidSubmit()" Color="Color.Primary" Class="ml-auto">Add Question</MudButton>
        </MudCardActions>
    </MudCard>
</MudForm>

@if (_questions != null)
{
    <h3>@Localizer["QuestionListTitle"]</h3>
    <QuestionList Questions="@_questions" Categories="_categories"></QuestionList>
}


@code {
    private List<Question>? _questions;
    private List<QuestionCategory>? _categories;
    private MudForm _form = default!;
    private readonly CreateQuestionValidator _validator = new();
    private string _selectedCategory;

    private CreateQuestion _model = new()
    {
        Text = "",
        Answers = new List<CreateAnswer>()
        {
            new()
            {
                User = "NOT IMPLEMENTED",
            }
        },
        Categories = new List<CreateQuestionCategory>()
    };

    protected override async Task OnInitializedAsync()
    {
        var jwt = await CheckJwt();
        _questions = await HttpUtils.Get<List<Question>>("question", jwtToken: jwt);
        _categories = await HttpUtils.Get<List<QuestionCategory>>("question/categories", jwtToken: jwt);
    }

    private async void OnValidSubmit()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Console.WriteLine("Form is not valid");
            return;
        }

        var jwt = await CheckJwt();
        var question = await HttpUtils.Post<CreateQuestion>("question", _model, jwtToken: jwt);
        _questions = await HttpUtils.Get<List<Question>>("question", jwtToken: jwt);
        _categories = await HttpUtils.Get<List<QuestionCategory>>("question/categories", jwtToken: jwt);
        Console.WriteLine("Question added");

        _model = new()
        {
            Text = "",
            Answers = new List<CreateAnswer>()
            {
                new()
                {
                    User = "NOT IMPLEMENTED",
                }
            },
            Categories = new List<CreateQuestionCategory>()
        };
        StateHasChanged();
    }

    private void AddAnswer()
    {
        _model.Answers.Add(new CreateAnswer()
        {
            User = "NOT IMPLEMENTED",
        });
    }

    private async Task<string> CheckJwt()
    {
        var token = await Localstorage.GetItemAsync<string>("token");
        if (token != null) return token;

        await Localstorage.RemoveItemAsync("token");
        Navigation.NavigateTo("/login");
        return "";
    }

    private void RemoveAnswer()
    {
        if (_model.Answers.Count > 0)
        {
            _model.Answers.RemoveAt(_model.Answers.Count - 1);
        }
    }

    private void RemoveCategory(MudChip chip)
    {
        var item = _model.Categories.Single(c => c.Name == chip.Text);
        _model.Categories.Remove(item);
    }

    private void AddCategory()
    {
        if (_categories != null)
        {
            var category = _categories.First(c => c.Name == _selectedCategory);
            _model.Categories.Add(new CreateQuestionCategory(category));
        }

        _selectedCategory = null;
    }
}