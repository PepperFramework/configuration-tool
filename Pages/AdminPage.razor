@page "/admin-page"
@using Blazored.LocalStorage
@using ConfigurationTool.Utils
@using System.ComponentModel.DataAnnotations
@using ConfigurationTool.Model
@inject IStringLocalizer<ApplicationResource> Localizer
@inject ILocalStorageService Localstorage
@inject NavigationManager NavigationManager

<PageTitle>Admin Page</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">@Localizer["AdminPage"]</MudText>
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudAlert Severity="Severity.Info">@Localizer["AddNewMembers"]</MudAlert>
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <h2>Invite new user</h2>
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })" @ref="_email"/>
                <MudSelect T="string" Label="Role" AnchorOrigin="Origin.BottomCenter" Required="true" @ref="_role">
                    @if (_roles.Count == 0)
                    {
                        <MudSelectItem Value="@("No roles available")"/>
                    }
                    else
                    {
                        foreach (var r in _roles)
                        {
                            <MudSelectItem Value="@(r.Name)"/>
                        }
                    }
                </MudSelect>
                <div class="d-flex align-center justify-space-between" style="margin-top: 2em;">
                    <MudButton OnClick="@RegisterUser" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" Class="ml-auto">@Localizer["RegisterUser"]</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12">
        <MudAlert Severity="Severity.Info">Here you can manage current invitations.</MudAlert>
        <MudPaper Class="pa-4">
            <h2 style="margin-bottom: 1em;">Manage current invitations</h2>
            <MudTable Items="_invitations" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh><b>@Localizer["Email"]</b></MudTh>
                    <MudTh><b>@Localizer["Role"]</b></MudTh>
                    <MudTh><b>@Localizer["CreatedAt"]</b></MudTh>
                    <MudTh><b>@Localizer["Actions"]</b></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Email</MudTd>
                    <MudTd>@_roles.Find(r => r.Id == context.RoleId)?.Name</MudTd>
                    <MudTd>@context.CreatedAt.ToShortDateString()</MudTd>
                    <MudTd>
                        <div class="d-flex pa-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mr-2" OnClick="() => ResendInvitation(context.Id)">
                                @Localizer["Resend"]
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => DeleteInvitation(context.Id)">
                                @Localizer["Delete"]
                            </MudButton>
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12">
        <MudAlert Severity="Severity.Info">Here you can manage current users.</MudAlert>
        <MudPaper Class="pa-4">
            <h2 style="margin-bottom: 1em;">Manage current users</h2>
            <MudTable Items="@_users" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh><b>@Localizer["Email"]</b></MudTh>
                    <MudTh><b>@Localizer["Role"]</b></MudTh>
                    <MudTh><b>@Localizer["FirstName"]</b></MudTh>
                    <MudTh><b>@Localizer["LastName"]</b></MudTh>
                    <MudTh><b>@Localizer["Actions"]</b></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Email</MudTd>
                    <MudTd>@_roles.Find(r => r.Id == context.RoleId)?.Name</MudTd>
                    <MudTd>@context.FirstName</MudTd>
                    <MudTd>@context.LastName</MudTd>
                    <MudTd>
                        <div class="d-flex pa-4">
                            <MudSelect Style="margin-right: 2em;" T="string" Label="Role"
                                       Disabled="@(context.Email == _userEmail)"
                                       Value="@_roles.Find(r => r.Id == context.RoleId)!.Name"
                                       ValueChanged="() => ChangeRole(context.Id)" AnchorOrigin="Origin.BottomCenter"
                                       @ref="_roleChange">
                                @if (_roles.Count == 0)
                                {
                                    <MudSelectItem Value="@("No roles available")"/>
                                }
                                else
                                {
                                    foreach (var r in _roles)
                                    {
                                        <MudSelectItem Value="@(r.Name)"/>
                                    }
                                }
                            </MudSelect>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => DeleteUser(context.Id, context.Email)">
                                @Localizer["Delete"]
                            </MudButton>
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

<!--TODO: Add list of users -->

@code {
    bool _success;
    MudForm? _form;
    List<Role> _roles = new List<Role>();
    List<User> _users = new List<User>();
    List<Invitation> _invitations = new List<Invitation>();
    MudTextField<string>? _email;
    MudSelect<string>? _role;
    MudSelect<string>? _roleChange;
    string _userEmail = "";

    protected override async Task OnInitializedAsync()
    {
        var jwt = await CheckJwt();
        var roleRes = await HttpUtils.Get<List<Role>>("role", jwt);
        var invitationRes = await GetInvitations(jwt);
        var userRes = await HttpUtils.Get<List<User>>("configuser", jwt);

        if (userRes == null || invitationRes == null || roleRes == null)
        {
            await AuthenticationUtils.RefreshToken(jwt);
            await Localstorage.RemoveItemAsync("token");
            NavigationManager.NavigateTo("/login");
            return;
        }

        _roles = roleRes;
        _users = userRes;
        _invitations = invitationRes;

        _userEmail = await Localstorage.GetItemAsync<string>("email");

        await base.OnInitializedAsync();
    }

    async Task<string> CheckJwt()
    {
        var token = await Localstorage.GetItemAsync<string>("token");
        if (token != null) return token;
        
        await Localstorage.RemoveItemAsync("token");
        NavigationManager.NavigateTo("/login");
        return "";
    }

    private async Task ChangeRole(int id)
    {
        var user = _users.FirstOrDefault(u => u.Id == id);
        if (user == null) return;

        var role = _roles.FirstOrDefault(r => r.Name == _roleChange.Value);
        if (role == null) return;

        user.RoleId = role.Id;
        var res = await HttpUtils.Put<object>($"configuser/{id}", user, await CheckJwt());

        if (res is string s && s.Contains("Unauthorized"))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
    }

    private async Task RegisterUser()
    {
        var user = new CreateUser()
        {
            Email = _email.Value,
            RoleId = _roles.FirstOrDefault(r => r.Name == _role.Value)!.Id
        };
        var res = await HttpUtils.Post<object>("configuser", user, await CheckJwt());
        Console.WriteLine(res);
        if (res is string s && s.Contains("Unauthorized"))
        {
            await AuthenticationUtils.RefreshToken(await CheckJwt());
            await Localstorage.RemoveItemAsync("token");
            NavigationManager.NavigateTo("/login");
            return;
        }

        _form.Reset();
        await UpdateInvitations();
    }

    private async Task OpenEditUser(int id)
    {
        // TODO
    }

    private async Task DeleteUser(int id, string email)
    {
        if(email == await Localstorage.GetItemAsync<string>("email"))
        {
            // TODO: info
            return;
        }

        var res = await HttpUtils.Delete<object>($"configuser/{id}", await CheckJwt());

        if (res is string s && s.Contains("Unauthorized"))
        {
            await AuthenticationUtils.RefreshToken(await CheckJwt());
            await Localstorage.RemoveItemAsync("token");
            NavigationManager.NavigateTo("/login");
            return;
        }

        _users.RemoveAll(u => u.Id == id);

        // TODO: animation?
    }

    private async Task ResendInvitation(int id)
    {
        var res = await HttpUtils.Post<object>($"configuser/invitation/{id}/resend", null, await CheckJwt());
        if (res is string s && s.Contains("Unauthorized"))
        {
            await AuthenticationUtils.RefreshToken(await CheckJwt());
            await Localstorage.RemoveItemAsync("token");
            NavigationManager.NavigateTo("/login");
            return;
        }

        await UpdateInvitations();
        // TODO: animation
    }

    private async Task DeleteInvitation(int id)
    {

        var res = await HttpUtils.Delete<object>($"configuser/invitation/{id}", await CheckJwt());
        if (res is string s && s.Contains("Unauthorized"))
        {
            await AuthenticationUtils.RefreshToken(await CheckJwt());
            await Localstorage.RemoveItemAsync("token");
            NavigationManager.NavigateTo("/login");
            return;
        }

        await UpdateInvitations();
    }

    private async Task<List<Invitation>?> GetInvitations(string jwt)
    {
        return await HttpUtils.Get<List<Invitation>>("configuser/invitation", jwt);
    }

    private async Task UpdateInvitations()
    {
        var invitationRes = await GetInvitations(await CheckJwt());
        if (invitationRes == null) return;
        _invitations = invitationRes;
    }
}