@using Blazored.LocalStorage
@using ConfigurationTool.Model
@using ConfigurationTool.Utils
@inject IStringLocalizer<ApplicationResource> Localizer
@inject ILocalStorageService Localstorage
@inject NavigationManager Navigation

<MudDialog Style="width: 600px">
    <DialogContent>
        <MudForm Model="@Question" @ref="@_form" Validation="@_validator.ValidateValue" ValidationDelay="0">
            <MudCard>
                <MudCardContent>
                    <MudChipSet T="string" AllClosable OnClose="RemoveCategory">
                        @foreach (var category in Question.Categories)
                        {
                            <MudChip Text="@category.Name"></MudChip>
                        }
                    </MudChipSet>
                    <MudTextField Label=@Localizer["Question"] @bind-Value="@Question.Text" For="@(() => Question.Text)" Immediate="@true"/>
                    @foreach (var answer in Question.Answers)
                    {
                        <MudTextField Label=@Localizer["Answer"] @bind-Value="answer.Text" For="@(() => answer.Text)" Immediate="@true"/>
                    }
                    <MudSelect T="string" Label="Neue Kategorie" Disabled="Question.Categories.Count == 3" @bind-Value="_selectedCategory" For="@(() => _selectedCategory)" Placeholder="Wählen Sie eine neue Kategorie aus">
                        @foreach(var category in Categories)
                        {
                        <MudSelectItem Value="@category.Name">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Info" OnClick="() => AddAnswer()">Add answer</MudButton>
                    <MudButton Color="Color.Warning" OnClick="() => RemoveAnswer()">Remove answer</MudButton>
                    <MudButton Color="Color.Success" OnClick="() => AddCategory()" Disabled="string.IsNullOrEmpty(_selectedCategory)">Add category</MudButton>
                </MudCardActions>
            </MudCard>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Delete" Color="Color.Error">Delete</MudButton>
        <MudButton OnClick="Submit" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save Changes</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Question Question { get; set; } = new();
    [Parameter] public List<QuestionCategory> Categories { get; set; } = new();

    private MudForm _form = default!;
    private readonly QuestionValidator _validator = new();
    private string _selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        MudDialog.Options.FullWidth = true;
    }


    async void Submit()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Console.WriteLine("Form is invalid");
            return;
        }
        
        await UpdateQuestion();
        StateHasChanged();
        MudDialog.Close(DialogResult.Ok(true));
    }

    async Task Delete()
    {
        var token = await Localstorage.GetItemAsync<string>("token");

        if (token == null)
        {
            await Localstorage.RemoveItemAsync("token");
            Navigation.NavigateTo("/login");
            return;
        }

        await HttpUtils.Delete<Question>($"question/{Question.Id}", token);
        
        MudDialog.Close(DialogResult.Ok($"Question is deleted"));
    }

    void Cancel() => MudDialog.Cancel();

    private void AddAnswer()
    {
        Question.Answers.Add(new Answer()
        {
            User = "NOT IMPLEMENTED",
        });
    }

    private async Task UpdateQuestion()
    {
        var token = await Localstorage.GetItemAsync<string>("token");

        if (token == null)
        {
            await Localstorage.RemoveItemAsync("token");
            Navigation.NavigateTo("/login");
            return;
        }

        await HttpUtils.Put<Question>($"question/{Question.Id}", new CreateQuestion(Question), token);
    }

    private void RemoveAnswer()
    {
        if (Question.Answers.Count > 0)
        {
            Question.Answers.RemoveAt(Question.Answers.Count - 1);
        }
    }
    
    private void RemoveCategory(MudChip chip)
    {
        var item = Question.Categories.Single(c => c.Name == chip.Text);
        Question.Categories.Remove(item);
    }
    
    private void AddCategory()
    {
        Question.Categories.Add(Categories.First(c => c.Name == _selectedCategory));
        _selectedCategory = null;
    }
}